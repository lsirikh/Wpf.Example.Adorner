<UserControl x:Class="Wpf.AdornerProject.Sample.Views.Elements.CircleShapeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Wpf.AdornerProject.Sample.Views.Elements"
			 xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
			 xmlns:behavior="clr-namespace:Wpf.AdornerProject.Sample.Behaviors"
			 xmlns:cal="http://caliburnmicro.com"
			 xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
			 xmlns:units="clr-namespace:Wpf.AdornerProject.Sample.UI.Units"
             mc:Ignorable="d" 
             d:DesignHeight="120" d:DesignWidth="100">
	

	<!-- Ellipse -->
	<!--<ContentControl Width="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Height="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Canvas.Left="{Binding X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Canvas.Top="{Binding Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Padding="1"
					Style="{StaticResource ItemAdornerStyle}">
		
		<ContentControl.ContextMenu>
			<ContextMenu Opacity="0.89">
				<MenuItem Header="도형편집"
						  IsEnabled="{Binding IsEditable, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
						  DataContext="{Binding }">
					<MenuItem.Icon>
					<md:PackIcon Kind="EditBoxOutline" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickEdit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Exit"
						  IsEnabled="{Binding IsEditable, UpdateSourceTrigger=PropertyChanged}">
					<MenuItem.Icon>
						<md:PackIcon Kind="EmergencyExit" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickExit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
			</ContextMenu>
		</ContentControl.ContextMenu>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>
			<Ellipse Grid.Row="0"
					 Fill="{Binding Fill, FallbackValue=Blue}"
					 >
				
			</Ellipse>
			<TextBlock Grid.Row="1"
					   VerticalAlignment="Center"
					   HorizontalAlignment="Center"
					   FontSize="20"
					   Text="테스트"/>
		</Grid>
		<ContentControl.RenderTransform>
			<RotateTransform Angle="{Binding Angle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
		</ContentControl.RenderTransform>
	</ContentControl>-->

	<!-- Properties Comment -->
	<!--
		Canvas.Left="{Binding X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		Canvas.Top="{Binding Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		Width="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		Height="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		Angle="{Binding Angle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		Fill="{Binding Fill, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		OnEditable="{Binding OnEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		IsEditable="{Binding IsEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		Lable="{Binding Lable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		FontSize="{Binding FontSize, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		IsShowLable="{Binding IsShowLable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
		x:Name="CircleEntityViewModel"
		Style="{StaticResource CustomItemAdornerStyle}"
	-->
	<!-- Ellipse -->
	<units:CustomControl Canvas.Left="{Binding X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Canvas.Top="{Binding Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Width="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Height="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 OnEditable="{Binding OnEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 IsEditable="{Binding IsEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 x:Name="CircleEntityViewModel"
						 Style="{StaticResource CustomItemAdornerStyle}">

		<units:CustomControl.ContextMenu>
			<ContextMenu Opacity="0.89">
				<MenuItem Header="도형편집"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  IsEnabled="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}, UpdateSourceTrigger=PropertyChanged}"
						  DataContext="{Binding }">
					<MenuItem.Icon>
						<md:PackIcon Kind="EditBoxOutline" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickEdit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Exit"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  IsEnabled="{Binding IsEditable, UpdateSourceTrigger=PropertyChanged}">
					<MenuItem.Icon>
						<md:PackIcon Kind="EmergencyExit" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickExit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Delete"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  >
					<MenuItem.Icon>
						<md:PackIcon Kind="Delete" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickDelete($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
			</ContextMenu>
		</units:CustomControl.ContextMenu>
		<!--<i:Interaction.Behaviors>
			<behavior:SelectionShapeBehavior />
			<behavior:MoveShapeBehavior />
		</i:Interaction.Behaviors>-->
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>
			<TextBlock Grid.Row="1"
					   x:Name="LableName"
					   IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
					   VerticalAlignment="Center"
					   TextAlignment="Center"
					   HorizontalAlignment="Stretch"
					   Margin="2"
					   Visibility="{Binding IsShowLable, Converter={StaticResource BooleanToVisibilityConverter}}"
					   FontSize="{Binding FontSize}"
					   Text="{Binding Lable, FallbackValue=테스트}"/>
						
			<Ellipse Grid.Row="0"
					 IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
					 StrokeThickness="{Binding StrokeThickness}">
				<Ellipse.Stroke>
					<SolidColorBrush Color="{Binding Stroke, Converter={StaticResource StringToColorConverter}}"/>
				</Ellipse.Stroke>
				<Ellipse.Fill>
					<SolidColorBrush Color="{Binding Fill, Converter={StaticResource StringToColorConverter}}"/>
				</Ellipse.Fill>
				<Ellipse.Width>
					<MultiBinding Converter="{StaticResource ShapeSizeWithLableConverter}" ConverterParameter="Width">
						<Binding Path="Width" />
					</MultiBinding>
				</Ellipse.Width>
				<Ellipse.Height>
					<MultiBinding Converter="{StaticResource ShapeSizeWithLableConverter}" ConverterParameter="Height">
						<Binding Path="Height"/>
						<Binding Path="ActualHeight" ElementName="LableName"/>
					</MultiBinding>
				</Ellipse.Height>
			</Ellipse>
			
		</Grid>
		<units:CustomControl.RenderTransform>
			<RotateTransform Angle="{Binding Angle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
		</units:CustomControl.RenderTransform>
	</units:CustomControl>

</UserControl>
